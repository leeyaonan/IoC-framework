<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--根标签beans，里面配置一个又一个的bean子标签，每一个bean子标签都代表一个类的配置-->
    <!--id标识了对象，class是类的全限定类名-->
    <bean id="accountDao" class="com.leeyaonan.dao.impl.JdbcAccountDaoImpl">
        <property name="ConnectionUtils" ref="connectionUtils"/>
    </bean>

    <bean id="transferService" class="com.leeyaonan.service.impl.TransferServiceImpl">
        <!--set + name之后锁定到值的set方法，通过反射技术可以调用该方法传入对应的值-->
        <property name="AccountDao" ref="accountDao"></property>
    </bean>


    <bean id="connectionUtils" class="com.leeyaonan.utils.ConnectionUtils"></bean>

    <!--事务管理器-->
    <bean id="transactionManager" class="com.leeyaonan.utils.TransactionManager">
        <property name="ConnectionUtils" ref="connectionUtils"/>
    </bean>

    <!--代理对象工厂-->
    <bean id="proxyFactory" class="com.leeyaonan.factory.ProxyFactory">
        <property name="TransactionManager" ref="transactionManager"/>
    </bean>

    <!--Spring ioc实例化Bean的三种方式-->
    <!--方式一：使用无参构造器（推荐）-->
    <!--<bean id="connectionUtils" class="com.leeyaonan.utils.ConnectionUtils"></bean>-->

    <!--另外两种方式是为了我们自己new的对象加入到SpringIOC容器管理-->
    <!--方式二：静态方法-->
    <!--<bean id="connectionUtils" class="com.leeyaonan.factory.CreateBeanFactory" factory-method="getInstanceStatic"></bean>-->

    <!--方式三：实例化方法-->
    <!--<bean id="createBeanFactory" class="com.leeyaonan.factory.CreateBeanFactory"></bean>-->
    <!--<bean id="connectionUtils" factory-bean="createBeanFactory" factory-method="getInstance"/>-->


</beans>